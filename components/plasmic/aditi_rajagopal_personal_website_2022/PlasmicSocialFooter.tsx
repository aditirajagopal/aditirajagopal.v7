// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hRsY5NbPeCQT1m4ubZULqa
// Component: Zmr6lqTMMC
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsc8HlPs3Ggff } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: C8HlPs3Ggff/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_aditi_rajagopal_personal_website_2022.module.css"; // plasmic-import: hRsY5NbPeCQT1m4ubZULqa/projectcss
import * as sty from "./PlasmicSocialFooter.module.css"; // plasmic-import: Zmr6lqTMMC/css

import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: 6w4-agHxOVW/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 31YSnHA68U5/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: Uczzl8hjTGd/icon

export type PlasmicSocialFooter__VariantMembers = {};

export type PlasmicSocialFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicSocialFooter__VariantsArgs;
export const PlasmicSocialFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicSocialFooter__ArgsType = {};
type ArgPropType = keyof PlasmicSocialFooter__ArgsType;
export const PlasmicSocialFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicSocialFooter__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultSocialFooterProps {
  className?: string;
}

function PlasmicSocialFooter__RenderFunc(props: {
  variants: PlasmicSocialFooter__VariantsArgs;
  args: PlasmicSocialFooter__ArgsType;
  overrides: PlasmicSocialFooter__OverridesType;
  dataFetches?: PlasmicSocialFooter__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsc8HlPs3Ggff()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(projectcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__kkYoW)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__t8330)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__aHoTy)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__hS5PV)}
            >
              <Icon5Icon
                a={"" as const}
                className={classNames(projectcss.all, sty.svg__bk00F)}
                href={"twitter.com/aditi_rajagopal" as const}
                role={"img"}
              />

              <Icon6Icon
                a={"" as const}
                className={classNames(projectcss.all, sty.svg__vIdo)}
                href={"github.com/aditirajagopal" as const}
                role={"img"}
              />

              <Icon28Icon
                a={"" as const}
                className={classNames(projectcss.all, sty.svg__ex3Xx)}
                href={"linkedin.com/in/aditirajagopal" as const}
                role={"img"}
              />
            </p.Stack>

            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Last Updated: January 2022"}
            </div>
          </p.Stack>
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSocialFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSocialFooter__VariantsArgs;
    args?: PlasmicSocialFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSocialFooter__Fetches;
  } & Omit<PlasmicSocialFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSocialFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSocialFooter__ArgProps,
      internalVariantPropNames: PlasmicSocialFooter__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSocialFooter__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSocialFooter";
  } else {
    func.displayName = `PlasmicSocialFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicSocialFooter = Object.assign(
  // Top-level PlasmicSocialFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicSocialFooter
    internalVariantProps: PlasmicSocialFooter__VariantProps,
    internalArgProps: PlasmicSocialFooter__ArgProps
  }
);

export default PlasmicSocialFooter;
/* prettier-ignore-end */
