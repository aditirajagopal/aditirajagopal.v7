// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hRsY5NbPeCQT1m4ubZULqa
// Component: sqhz7hEEIvK
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CopyableLink from "../../CopyableLink"; // plasmic-import: sGqSkRLs-FT/component

import { useScreenVariants as useScreenVariantsc8HlPs3Ggff } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: C8HlPs3Ggff/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import * as projectcss from "./plasmic_aditi_rajagopal_personal_website_2022.module.css"; // plasmic-import: hRsY5NbPeCQT1m4ubZULqa/projectcss
import * as sty from "./PlasmicHome.module.css"; // plasmic-import: sqhz7hEEIvK/css

import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: 6w4-agHxOVW/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: 31YSnHA68U5/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: Uczzl8hjTGd/icon

export type PlasmicHome__VariantMembers = {};

export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultHomeProps {
  dataFetches: PlasmicHome__Fetches;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;
  dataFetches?: PlasmicHome__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const [isN5221074Hover, triggerN5221074HoverProps] = useTrigger(
    "useHover",
    {}
  );
  const [isN5222154Hover, triggerN5222154HoverProps] = useTrigger(
    "useHover",
    {}
  );
  const triggers = {
    hover_5221074: isN5221074Hover,
    hover_5222154: isN5222154Hover
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsc8HlPs3Ggff()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__zeHa2)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___0Wo4G)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__yucmv)}>
                <div className={classNames(projectcss.all, sty.freeBox__oWtNk)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ekBx
                    )}
                  >
                    {"aditi rajagopal"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bZbfj
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>{""}</React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Midwest VC. Data Scientist. Recovering Engineer"}
                      </span>
                      <React.Fragment>{"."}</React.Fragment>
                    </React.Fragment>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__tr4Of)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yHkdh
                      )}
                      data-plasmic-trigger-props={[triggerN5221074HoverProps]}
                    >
                      {triggers.hover_5221074 ? (
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Short Bio"}
                          </span>
                          <React.Fragment>
                            {
                              "\n\nHi there! My name is Aditi. I'm a startup investor and data scientist at Invest Detroit Ventures. I'm an alum of University of Virginia, CoderPad, IBM, and University of Michigan "
                            }
                          </React.Fragment>
                        </React.Fragment>
                      ) : (
                        "Short Bio"
                      )}
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oakH
                      )}
                      data-plasmic-trigger-props={[triggerN5222154HoverProps]}
                    >
                      {triggers.hover_5222154 ? (
                        <React.Fragment>
                          <React.Fragment>{""}</React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"Longer Spiel"}
                          </span>
                          <React.Fragment>
                            {
                              "\n\nI’m currently an associate at Invest Detroit Ventures, where I cultivate relationships with entrepreneurs and ecosystem partners. I also design and implement data systems to better manage our pipeline, KPIs and over 100 portfolio companies. \n\nI recently graduated from University of Virginia, where I learned from the best at Transform Capital, Fin VC, AmplifyHer and CoderPad. I started my career as a software engineer at IBM where I built open source cloud infrastructure products including IBM Cloud, Kubernetes, OpenStack and Docker. "
                            }
                          </React.Fragment>
                        </React.Fragment>
                      ) : (
                        "Longer Spiel"
                      )}
                    </div>
                  </div>
                </div>
              </div>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vzKg)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__fq6Ej)}>
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(projectcss.a, sty.link__x8GI7)}
                    component={Link}
                    href={"/thoughts" as const}
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__kIZq1)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zuwNv
                        )}
                      >
                        {"💭"}
                      </div>
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__jKjr)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kugnc
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "tabletOrSmaller")
                          ? "thoughts"
                          : "thoughts"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  {true ? (
                    <CopyableLink
                      className={classNames(
                        "__wab_instance",
                        sty.copyableLink__diLfl
                      )}
                    >
                      {"Thoughts"}
                    </CopyableLink>
                  ) : null}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__h8D0)}>
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(projectcss.a, sty.link__tW3D3)}
                    component={Link}
                    href={"/pto" as const}
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__j5X6R)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rp6E
                        )}
                      >
                        {"🤝"}
                      </div>
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__aPrSi)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5Iz4R
                        )}
                      >
                        {"working with me"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  {true ? (
                    <CopyableLink
                      className={classNames(
                        "__wab_instance",
                        sty.copyableLink__hiFEq
                      )}
                    >
                      {"Thoughts"}
                    </CopyableLink>
                  ) : null}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__g3Bdw)}>
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(projectcss.a, sty.link__wBuw)}
                    component={Link}
                    href={"/portfolio" as const}
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fkovJ)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1Vm0H
                        )}
                      >
                        {"🖌"}
                      </div>
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__luxwX)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ao7Tw
                        )}
                      >
                        {"portfolio"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  {true ? (
                    <CopyableLink
                      className={classNames(
                        "__wab_instance",
                        sty.copyableLink__eU3Zp
                      )}
                    >
                      {"Thoughts"}
                    </CopyableLink>
                  ) : null}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__fwu3M)}>
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(projectcss.a, sty.link__es3U4)}
                    component={Link}
                    href={"/learningplan" as const}
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__h8VdH)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__loFuK
                        )}
                      >
                        {"📓"}
                      </div>
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__b8Hqw)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oeLsG
                        )}
                      >
                        {"learning plan"}
                      </div>
                    </p.Stack>
                  </p.Stack>

                  {true ? (
                    <CopyableLink
                      className={classNames(
                        "__wab_instance",
                        sty.copyableLink___9XeRw
                      )}
                    >
                      {"Thoughts"}
                    </CopyableLink>
                  ) : null}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__eIy9M)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yXuAr)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__heXAi)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__usaOt
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dRuRo
                          )}
                        >
                          <Icon5Icon
                            a={"twitter.com/aditi_rajagopal" as const}
                            className={classNames(
                              projectcss.all,
                              sty.svg__opOMc
                            )}
                            role={"img"}
                          />

                          <Icon6Icon
                            a={"github.com/aditirajagopal" as const}
                            className={classNames(
                              projectcss.all,
                              sty.svg___3KwPo
                            )}
                            role={"img"}
                          />

                          <Icon28Icon
                            a={"linkedin.com/in/aditirajagopal" as const}
                            className={classNames(
                              projectcss.all,
                              sty.svg__dq4Vp
                            )}
                            role={"img"}
                          />
                        </p.Stack>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__f8Md5
                          )}
                        >
                          {"Last Updated: January 2022"}
                        </div>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </div>
              </p.Stack>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHome__Fetches;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHome__ArgProps,
      internalVariantPropNames: PlasmicHome__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
